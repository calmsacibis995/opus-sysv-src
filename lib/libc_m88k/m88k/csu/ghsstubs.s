;
;		GHSSTUBS.S
;
; This file contains the stubs for the second Silicon test compiler.
; These are used to effect the instructions which cannot be executed
; on the chip. 
;
;   These are
;
; 1) floating point instructions. This compiler does NOT compensate for
;    the lack of these instructions.
; 2) Integer multiply is normally done by the chip in
;    the floating point unit. The above compiler will call functions
;    in this file for these operations.
;
;  The interface for these functions is as below.
;
;	Input	r26,r27
;
;	Output	r27
;	Temporaries for this funtion 	r26 through r30
;	Function is called by bsr so return via jmp r1
;	These functions are intended to be leaf procedures, not to
;	need a stack and not to have to save r1.	
;
;		This file should be appended to the startup file
;		crt0.s. (As of 12/21/87, the compiler will not
;		compensate for the mak,clr,or combination used in
;		bitfield assignments. Opcodes illegal to the assembler
;		"help" will be output instead. This should be watched
;		for when compiling, and will be fixed if a requirement
;		exists.) FIXED AT 01/15/88. (??)
;		The user is relied on not to compile floating
;		point code. 
;		Exception handling during
;		st.d instructions will not be a problem if no floating
;		point is used. Note that all this applies only to code
;		generated by the compiler. Rel 0.5 in particular
;		includes several hand optimized assembly functions
;		which will cause problems. These should be reverted to
;		C compiled versions. 
;
;
	file		"ghsstubs.s"
        text
	global		$mulghs
$mulghs:
;	or		r28,r0,r27      ; done in bsr.n delay slot
	or		r29,r26,r28	; test for zero
	or		r30,r0,1
	bcnd.n		ne0,r29,gh7mul1
	or		r27,r0,r0
	jmp		r1
gh7mul1:
	bb0		0,r26,gh7mul2
; some think the next add should be an addu 
; they were right   CW/SAJ  1/27/88
	addu		r27,r27,r28
gh7mul2:
	extu		r26,r26,0<1>	; shift right by 1
	bcnd		eq0,r26,gh7mul3
	rot		r28,r28,0<31>
	br.n		gh7mul1
	and.c		r28,r28,r30	; shift left by 1
gh7mul3:
	jmp		r1

	data

